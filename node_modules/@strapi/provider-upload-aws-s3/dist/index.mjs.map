{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import type { AwsCredentialIdentity } from '@aws-sdk/types';\nimport type { InitOptions } from '.';\n\nconst ENDPOINT_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\n\ninterface BucketInfo {\n  bucket?: string | null;\n  err?: string;\n}\n\nexport function isUrlFromBucket(fileUrl: string, bucketName: string, baseUrl = ''): boolean {\n  const url = new URL(fileUrl);\n\n  // Check if the file URL is using a base URL (e.g. a CDN).\n  // In this case do not sign the URL.\n  if (baseUrl) {\n    return false;\n  }\n\n  const { bucket } = getBucketFromAwsUrl(fileUrl);\n\n  if (bucket) {\n    return bucket === bucketName;\n  }\n\n  // File URL might be of an S3-compatible provider. (or an invalid URL)\n  // In this case, check if the bucket name appears in the URL host or path.\n  // e.g. https://minio.example.com/bucket-name/object-key\n  // e.g. https://bucket.nyc3.digitaloceanspaces.com/folder/img.png\n  return url.host.startsWith(`${bucketName}.`) || url.pathname.includes(`/${bucketName}/`);\n}\n\n/**\n * Parse the bucket name from a URL.\n * See all URL formats in https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html\n *\n * @param {string} fileUrl - the URL to parse\n * @returns {object} result\n * @returns {string} result.bucket - the bucket name\n * @returns {string} result.err - if any\n */\nfunction getBucketFromAwsUrl(fileUrl: string): BucketInfo {\n  const url = new URL(fileUrl);\n\n  // S3://<bucket-name>/<key>\n  if (url.protocol === 's3:') {\n    const bucket = url.host;\n\n    if (!bucket) {\n      return { err: `Invalid S3 url: no bucket: ${url}` };\n    }\n    return { bucket };\n  }\n\n  if (!url.host) {\n    return { err: `Invalid S3 url: no hostname: ${url}` };\n  }\n\n  const matches = url.host.match(ENDPOINT_PATTERN);\n  if (!matches) {\n    return { err: `Invalid S3 url: hostname does not appear to be a valid S3 endpoint: ${url}` };\n  }\n\n  const prefix = matches[1];\n  // https://s3.amazonaws.com/<bucket-name>\n  if (!prefix) {\n    if (url.pathname === '/') {\n      return { bucket: null };\n    }\n\n    const index = url.pathname.indexOf('/', 1);\n\n    // https://s3.amazonaws.com/<bucket-name>\n    if (index === -1) {\n      return { bucket: url.pathname.substring(1) };\n    }\n\n    // https://s3.amazonaws.com/<bucket-name>/\n    if (index === url.pathname.length - 1) {\n      return { bucket: url.pathname.substring(1, index) };\n    }\n\n    // https://s3.amazonaws.com/<bucket-name>/key\n    return { bucket: url.pathname.substring(1, index) };\n  }\n\n  // https://<bucket-name>.s3.amazonaws.com/\n  return { bucket: prefix.substring(0, prefix.length - 1) };\n}\n\n// TODO Remove this in V5 since we will only support the new config structure\nexport const extractCredentials = (options: InitOptions): AwsCredentialIdentity | null => {\n  // legacy\n  if (options.accessKeyId && options.secretAccessKey) {\n    return {\n      accessKeyId: options.accessKeyId,\n      secretAccessKey: options.secretAccessKey,\n    };\n  }\n  // Legacy\n  if (options.s3Options?.accessKeyId && options.s3Options.secretAccessKey) {\n    process.emitWarning(\n      'Credentials passed directly to s3Options is deprecated and will be removed in a future release. Please wrap them inside a credentials object.'\n    );\n    return {\n      accessKeyId: options.s3Options.accessKeyId,\n      secretAccessKey: options.s3Options.secretAccessKey,\n    };\n  }\n  // V5\n  if (options.s3Options?.credentials) {\n    return {\n      accessKeyId: options.s3Options.credentials.accessKeyId,\n      secretAccessKey: options.s3Options.credentials.secretAccessKey,\n    };\n  }\n  return null;\n};\n","import type { ReadStream } from 'node:fs';\nimport { getOr } from 'lodash/fp';\nimport {\n  S3Client,\n  GetObjectCommand,\n  DeleteObjectCommand,\n  DeleteObjectCommandOutput,\n  PutObjectCommandInput,\n  CompleteMultipartUploadCommandOutput,\n  AbortMultipartUploadCommandOutput,\n  S3ClientConfig,\n  ObjectCannedACL,\n} from '@aws-sdk/client-s3';\nimport type { AwsCredentialIdentity } from '@aws-sdk/types';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { extractCredentials, isUrlFromBucket } from './utils';\n\nexport interface File {\n  name: string;\n  alternativeText?: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  formats?: Record<string, unknown>;\n  hash: string;\n  ext?: string;\n  mime: string;\n  size: number;\n  sizeInBytes: number;\n  url: string;\n  previewUrl?: string;\n  path?: string;\n  provider?: string;\n  provider_metadata?: Record<string, unknown>;\n  stream?: ReadStream;\n  buffer?: Buffer;\n}\n\nexport type UploadCommandOutput = (\n  | CompleteMultipartUploadCommandOutput\n  | AbortMultipartUploadCommandOutput\n) & {\n  Location: string;\n};\n\nexport interface AWSParams {\n  Bucket: string; // making it required\n  ACL?: ObjectCannedACL;\n  signedUrlExpires?: number;\n}\n\nexport interface DefaultOptions extends S3ClientConfig {\n  // TODO Remove this in V5\n  accessKeyId?: AwsCredentialIdentity['accessKeyId'];\n  secretAccessKey?: AwsCredentialIdentity['secretAccessKey'];\n  // Keep this for V5\n  credentials?: AwsCredentialIdentity;\n  params?: AWSParams;\n  [k: string]: any;\n}\n\nexport type InitOptions = (DefaultOptions | { s3Options: DefaultOptions }) & {\n  baseUrl?: string;\n  rootPath?: string;\n  [k: string]: any;\n};\n\nconst assertUrlProtocol = (url: string) => {\n  // Regex to test protocol like \"http://\", \"https://\"\n  return /^\\w*:\\/\\//.test(url);\n};\n\nconst getConfig = ({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) => {\n  if (Object.keys(legacyS3Options).length > 0) {\n    process.emitWarning(\n      \"S3 configuration options passed at root level of the plugin's providerOptions is deprecated and will be removed in a future release. Please wrap them inside the 's3Options:{}' property.\"\n    );\n  }\n  const credentials = extractCredentials({ s3Options, ...legacyS3Options });\n  const config = {\n    ...s3Options,\n    ...legacyS3Options,\n    ...(credentials ? { credentials } : {}),\n  };\n\n  config.params.ACL = getOr(ObjectCannedACL.public_read, ['params', 'ACL'], config);\n\n  return config;\n};\n\nexport default {\n  init({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) {\n    // TODO V5 change config structure to avoid having to do this\n    const config = getConfig({ baseUrl, rootPath, s3Options, ...legacyS3Options });\n    const s3Client = new S3Client(config);\n    const filePrefix = rootPath ? `${rootPath.replace(/\\/+$/, '')}/` : '';\n\n    const getFileKey = (file: File) => {\n      const path = file.path ? `${file.path}/` : '';\n      return `${filePrefix}${path}${file.hash}${file.ext}`;\n    };\n\n    const upload = async (file: File, customParams: Partial<PutObjectCommandInput> = {}) => {\n      const fileKey = getFileKey(file);\n      const uploadObj = new Upload({\n        client: s3Client,\n        params: {\n          Bucket: config.params.Bucket,\n          Key: fileKey,\n          Body: file.stream || Buffer.from(file.buffer as any, 'binary'),\n          ACL: config.params.ACL,\n          ContentType: file.mime,\n          ...customParams,\n        },\n      });\n\n      const upload = (await uploadObj.done()) as UploadCommandOutput;\n\n      if (assertUrlProtocol(upload.Location)) {\n        file.url = baseUrl ? `${baseUrl}/${fileKey}` : upload.Location;\n      } else {\n        // Default protocol to https protocol\n        file.url = `https://${upload.Location}`;\n      }\n    };\n\n    return {\n      isPrivate() {\n        return config.params.ACL === 'private';\n      },\n\n      async getSignedUrl(file: File, customParams: any): Promise<{ url: string }> {\n        // Do not sign the url if it does not come from the same bucket.\n        if (!isUrlFromBucket(file.url, config.params.Bucket, baseUrl)) {\n          return { url: file.url };\n        }\n        const fileKey = getFileKey(file);\n\n        const url = await getSignedUrl(\n          s3Client,\n          new GetObjectCommand({\n            Bucket: config.params.Bucket,\n            Key: fileKey,\n            ...customParams,\n          }),\n          {\n            expiresIn: getOr(15 * 60, ['params', 'signedUrlExpires'], config),\n          }\n        );\n\n        return { url };\n      },\n      uploadStream(file: File, customParams = {}) {\n        return upload(file, customParams);\n      },\n      upload(file: File, customParams = {}) {\n        return upload(file, customParams);\n      },\n      delete(file: File, customParams = {}): Promise<DeleteObjectCommandOutput> {\n        const command = new DeleteObjectCommand({\n          Bucket: config.params.Bucket,\n          Key: getFileKey(file),\n          ...customParams,\n        });\n        return s3Client.send(command);\n      },\n    };\n  },\n};\n"],"names":["index","upload"],"mappings":";;;;AAGA,MAAM,mBAAmB;AAOlB,SAAS,gBAAgB,SAAiB,YAAoB,UAAU,IAAa;AACpF,QAAA,MAAM,IAAI,IAAI,OAAO;AAI3B,MAAI,SAAS;AACJ,WAAA;AAAA,EACT;AAEA,QAAM,EAAE,OAAA,IAAW,oBAAoB,OAAO;AAE9C,MAAI,QAAQ;AACV,WAAO,WAAW;AAAA,EACpB;AAMA,SAAO,IAAI,KAAK,WAAW,GAAG,UAAU,GAAG,KAAK,IAAI,SAAS,SAAS,IAAI,UAAU,GAAG;AACzF;AAWA,SAAS,oBAAoB,SAA6B;AAClD,QAAA,MAAM,IAAI,IAAI,OAAO;AAGvB,MAAA,IAAI,aAAa,OAAO;AAC1B,UAAM,SAAS,IAAI;AAEnB,QAAI,CAAC,QAAQ;AACX,aAAO,EAAE,KAAK,8BAA8B,GAAG,GAAG;AAAA,IACpD;AACA,WAAO,EAAE,OAAO;AAAA,EAClB;AAEI,MAAA,CAAC,IAAI,MAAM;AACb,WAAO,EAAE,KAAK,gCAAgC,GAAG,GAAG;AAAA,EACtD;AAEA,QAAM,UAAU,IAAI,KAAK,MAAM,gBAAgB;AAC/C,MAAI,CAAC,SAAS;AACZ,WAAO,EAAE,KAAK,uEAAuE,GAAG,GAAG;AAAA,EAC7F;AAEM,QAAA,SAAS,QAAQ,CAAC;AAExB,MAAI,CAAC,QAAQ;AACP,QAAA,IAAI,aAAa,KAAK;AACjB,aAAA,EAAE,QAAQ;IACnB;AAEA,UAAMA,SAAQ,IAAI,SAAS,QAAQ,KAAK,CAAC;AAGzC,QAAIA,WAAU,IAAI;AAChB,aAAO,EAAE,QAAQ,IAAI,SAAS,UAAU,CAAC;IAC3C;AAGA,QAAIA,WAAU,IAAI,SAAS,SAAS,GAAG;AACrC,aAAO,EAAE,QAAQ,IAAI,SAAS,UAAU,GAAGA,MAAK;IAClD;AAGA,WAAO,EAAE,QAAQ,IAAI,SAAS,UAAU,GAAGA,MAAK;EAClD;AAGO,SAAA,EAAE,QAAQ,OAAO,UAAU,GAAG,OAAO,SAAS,CAAC;AACxD;AAGa,MAAA,qBAAqB,CAAC,YAAuD;AAEpF,MAAA,QAAQ,eAAe,QAAQ,iBAAiB;AAC3C,WAAA;AAAA,MACL,aAAa,QAAQ;AAAA,MACrB,iBAAiB,QAAQ;AAAA,IAAA;AAAA,EAE7B;AAEA,MAAI,QAAQ,WAAW,eAAe,QAAQ,UAAU,iBAAiB;AAC/D,YAAA;AAAA,MACN;AAAA,IAAA;AAEK,WAAA;AAAA,MACL,aAAa,QAAQ,UAAU;AAAA,MAC/B,iBAAiB,QAAQ,UAAU;AAAA,IAAA;AAAA,EAEvC;AAEI,MAAA,QAAQ,WAAW,aAAa;AAC3B,WAAA;AAAA,MACL,aAAa,QAAQ,UAAU,YAAY;AAAA,MAC3C,iBAAiB,QAAQ,UAAU,YAAY;AAAA,IAAA;AAAA,EAEnD;AACO,SAAA;AACT;ACjDA,MAAM,oBAAoB,CAAC,QAAgB;AAElC,SAAA,YAAY,KAAK,GAAG;AAC7B;AAEA,MAAM,YAAY,CAAC,EAAE,SAAS,UAAU,WAAW,GAAG,sBAAmC;AACvF,MAAI,OAAO,KAAK,eAAe,EAAE,SAAS,GAAG;AACnC,YAAA;AAAA,MACN;AAAA,IAAA;AAAA,EAEJ;AACA,QAAM,cAAc,mBAAmB,EAAE,WAAW,GAAG,gBAAiB,CAAA;AACxE,QAAM,SAAS;AAAA,IACb,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAI,cAAc,EAAE,YAAA,IAAgB,CAAC;AAAA,EAAA;AAGhC,SAAA,OAAO,MAAM,MAAM,gBAAgB,aAAa,CAAC,UAAU,KAAK,GAAG,MAAM;AAEzE,SAAA;AACT;AAEA,MAAe,QAAA;AAAA,EACb,KAAK,EAAE,SAAS,UAAU,WAAW,GAAG,mBAAgC;AAEhE,UAAA,SAAS,UAAU,EAAE,SAAS,UAAU,WAAW,GAAG,iBAAiB;AACvE,UAAA,WAAW,IAAI,SAAS,MAAM;AAC9B,UAAA,aAAa,WAAW,GAAG,SAAS,QAAQ,QAAQ,EAAE,CAAC,MAAM;AAE7D,UAAA,aAAa,CAAC,SAAe;AACjC,YAAM,OAAO,KAAK,OAAO,GAAG,KAAK,IAAI,MAAM;AACpC,aAAA,GAAG,UAAU,GAAG,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG;AAAA,IAAA;AAGpD,UAAM,SAAS,OAAO,MAAY,eAA+C,CAAA,MAAO;AAChF,YAAA,UAAU,WAAW,IAAI;AACzB,YAAA,YAAY,IAAI,OAAO;AAAA,QAC3B,QAAQ;AAAA,QACR,QAAQ;AAAA,UACN,QAAQ,OAAO,OAAO;AAAA,UACtB,KAAK;AAAA,UACL,MAAM,KAAK,UAAU,OAAO,KAAK,KAAK,QAAe,QAAQ;AAAA,UAC7D,KAAK,OAAO,OAAO;AAAA,UACnB,aAAa,KAAK;AAAA,UAClB,GAAG;AAAA,QACL;AAAA,MAAA,CACD;AAEKC,YAAAA,UAAU,MAAM,UAAU;AAE5B,UAAA,kBAAkBA,QAAO,QAAQ,GAAG;AACtC,aAAK,MAAM,UAAU,GAAG,OAAO,IAAI,OAAO,KAAKA,QAAO;AAAA,MAAA,OACjD;AAEA,aAAA,MAAM,WAAWA,QAAO,QAAQ;AAAA,MACvC;AAAA,IAAA;AAGK,WAAA;AAAA,MACL,YAAY;AACH,eAAA,OAAO,OAAO,QAAQ;AAAA,MAC/B;AAAA,MAEA,MAAM,aAAa,MAAY,cAA6C;AAEtE,YAAA,CAAC,gBAAgB,KAAK,KAAK,OAAO,OAAO,QAAQ,OAAO,GAAG;AACtD,iBAAA,EAAE,KAAK,KAAK;QACrB;AACM,cAAA,UAAU,WAAW,IAAI;AAE/B,cAAM,MAAM,MAAM;AAAA,UAChB;AAAA,UACA,IAAI,iBAAiB;AAAA,YACnB,QAAQ,OAAO,OAAO;AAAA,YACtB,KAAK;AAAA,YACL,GAAG;AAAA,UAAA,CACJ;AAAA,UACD;AAAA,YACE,WAAW,MAAM,KAAK,IAAI,CAAC,UAAU,kBAAkB,GAAG,MAAM;AAAA,UAClE;AAAA,QAAA;AAGF,eAAO,EAAE,IAAI;AAAA,MACf;AAAA,MACA,aAAa,MAAY,eAAe,IAAI;AACnC,eAAA,OAAO,MAAM,YAAY;AAAA,MAClC;AAAA,MACA,OAAO,MAAY,eAAe,IAAI;AAC7B,eAAA,OAAO,MAAM,YAAY;AAAA,MAClC;AAAA,MACA,OAAO,MAAY,eAAe,IAAwC;AAClE,cAAA,UAAU,IAAI,oBAAoB;AAAA,UACtC,QAAQ,OAAO,OAAO;AAAA,UACtB,KAAK,WAAW,IAAI;AAAA,UACpB,GAAG;AAAA,QAAA,CACJ;AACM,eAAA,SAAS,KAAK,OAAO;AAAA,MAC9B;AAAA,IAAA;AAAA,EAEJ;AACF;"}